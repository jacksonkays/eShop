name: Update Environment

permissions:
  id-token: write
  contents: read

on:
  push:
    paths:
      - 'src/**'
  pull_request:
    types: [synchronize]
    paths:
      - 'src/**'

concurrency: ${{ github.event.number || github.ref_name }}

jobs:
  config:
    if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
    name: Get Configuration
    uses: ./.github/workflows/environment_config.yml

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build
      - name: Publish
        run: dotnet publish

  upload_artifact:
      runs-on: ubuntu-latest
      steps:

        - name: Zip Up Artifact
          run: cd src/zip -r {SETUP CONTEXT HERE}
         
        - name: Azure Login
          uses: azure/login@v2
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}

        - name: Upload Artifact to Azure CLI
          uses: azure/cli@v2
          with:
            azcliversion: 2.57.0
            inlineScript: az storage blob upload --account-name prsourcecodezipdemo --container-name source-code-zips --name {FIX} --file my-code-changes.zip --auth-mode login --overwrite

  update_env:
    if: github.event_name == 'pull_request' || (contains(github.event.ref, 'refs/heads') && !github.event.created)
    name: Update ${{ needs.config.outputs.type }} Environment
    runs-on: ubuntu-latest

    needs: config
    environment: ${{ needs.config.outputs.type }}

    env:
      ENVIRONMENT_NAME: ${{ needs.config.outputs.name }}
      ENVIRONMENT_TYPE: ${{ needs.config.outputs.type }}

    steps:
      - name: Install DevCenter CLI Extension
        run: az extension add --name devcenter --upgrade

      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Update Environment
        run: |
          #Get Executing User of Environment
          user=$(az devcenter dev environment list \
               --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
               --query "[?name=='${{ env.ENVIRONMENT_NAME }}'].user | [0]" --output tsv | tr -d '"' | sed 's/\r//')
          
          #Call Deploy Command with User Context
          az devcenter dev environment deploy \
              --name ${{ env.ENVIRONMENT_NAME }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --user-id $user --parameters '{ "name": "${{ env.ENVIRONMENT_NAME }}", "repoUrl": "${{ github.repository }}", "branch": "${{ github.ref_name }}" }'

      - name: Get Resource Group
        shell: bash {0}
        run: |
          echo "Getting environment ${{ env.ENVIRONMENT_NAME }}..."
          environment_rg=$(az devcenter dev environment show --name ${{ env.ENVIRONMENT_NAME }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --only-show-errors --query resourceGroupId --output tsv 2>&1)

          if [ $? -ne 0 ]; then
              # Prod (main) environment may not be created yet
              if [[ $environment_rg =~ "EnvironmentCannotBeFound" || $environment_rg =~ "EnvironmentNotFound" ]] && [[ "$ENVIRONMENT_TYPE" == "Prod" ]]; then
                  echo "Environment ${{ env.ENVIRONMENT_NAME }} not found, creating..."
                            
                  environment_rg=$(az devcenter dev environment create \
                      --name ${{ env.ENVIRONMENT_NAME }} --environment-type ${{ env.ENVIRONMENT_TYPE }} \
                      --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
                      --catalog-name ${{ vars.AZURE_CATALOG }} --environment-definition-name ${{ vars.AZURE_CATALOG_ITEM }} \
                      --parameters '{ "name": "${{ env.ENVIRONMENT_NAME }}", "repoUrl": "${{ github.repository }}", "branch": "${{ github.ref_name }}" }' --only-show-errors \
                      --query resourceGroupId --output tsv 2>&1)

                  if [ $? -ne 0 ]; then
                      echo "Failed to create environment ${{ env.ENVIRONMENT_NAME }}"
                      echo "::error::az devcenter dev environment create command failed: $environment_rg"; exit 1
                  fi
              else
                  echo "Failed to get environment ${{ env.ENVIRONMENT_NAME }}"
                  echo "::error::az devcenter dev environment show command failed: $environment_rg"; exit 1
              fi
          fi

          environment_group=${environment_rg##*/}
          environment_sub=${environment_rg%/resourceGroups*}
          environment_sub=${environment_sub##*/}

          echo "ENVIRONMENT_GROUP=$environment_group" >> $GITHUB_ENV
          echo "ENVIRONMENT_SUB=$environment_sub" >> $GITHUB_ENV

          echo "- [View environment resources in the Azure portal](https://portal.azure.com/#@${{ vars.AZURE_TENANT_ID }}/resource$environment_rg)" >> $GITHUB_STEP_SUMMARY

      - name: Get Web Url
        run: |
          webUrl=$(az containerapp show --name webapp --resource-group ${{ env.ENVIRONMENT_GROUP }} --query "properties.configuration.ingress.fqdn" --output tsv | tr -d '"' | sed 's/\r//')
          
          echo "- [View the deployed Web App](https://$webUrl)" >> $GITHUB_STEP_SUMMARY

      - name: Delete Environment if Failure
        if: failure()
        run: |  
          user=$(az devcenter dev environment list \
               --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
               --query "[?name=='${{ env.ENVIRONMENT_NAME }}'].user | [0]" --output tsv | tr -d '"' | sed 's/\r//')
          
          az devcenter dev environment delete \
              --name ${{ env.ENVIRONMENT_NAME }} \
              --dev-center ${{ vars.AZURE_DEVCENTER }} --project ${{ vars.AZURE_PROJECT }} \
              --user-id $user --yes -y          
